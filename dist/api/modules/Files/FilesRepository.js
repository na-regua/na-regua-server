'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};Object.defineProperty(exports,'__esModule',{value:true});const multer_1=require('../../../config/multer');const HttpException_1=require('../../../core/HttpException/HttpException');const errorHandler_1=require('../../../core/errorHandler/errorHandler');const index_1=require('../../../core/index');const FilesSchema_1=require('./FilesSchema');class FilesRepository{update_user_avatar(req,res){return __awaiter(this,void 0,void 0,function*(){try{const user=res.locals.user;const {avatarId}=req.params;if(!user){throw new HttpException_1.HttpException(400,index_1.SYSTEM_ERRORS.USER_NOT_FOUND);}if(user.avatar._id.toString()!==avatarId){throw new HttpException_1.HttpException(403,index_1.SYSTEM_ERRORS.FORBIDDEN);}const file=req.file;if(!file){throw new HttpException_1.HttpException(400,index_1.SYSTEM_ERRORS.FILE_NOT_FOUND);}const avatarFile=yield FilesSchema_1.FilesModel.findById(avatarId);if(!avatarFile){throw new HttpException_1.HttpException(400,index_1.SYSTEM_ERRORS.FILE_NOT_FOUND);}yield Promise.all([(0,multer_1.cloudinaryDestroy)(avatarFile.filename),avatarFile.updateOne({original_name:file.originalname,filename:file.filename,url:file.path,mimetype:file.mimetype})]);const updatedFile=yield FilesSchema_1.FilesModel.findById(avatarId);return res.status(200).json(updatedFile);}catch(error){return(0,errorHandler_1.errorHandler)(error,res);}});}update_barber_avatar(req,res){return __awaiter(this,void 0,void 0,function*(){try{const barber=res.locals.barber;const {avatarId}=req.params;if(!avatarId){throw new HttpException_1.HttpException(400,index_1.SYSTEM_ERRORS.FILE_NOT_FOUND);}if(barber.avatar&&barber.avatar._id.toString()!==avatarId){throw new HttpException_1.HttpException(403,index_1.SYSTEM_ERRORS.FORBIDDEN);}const file=req.file;if(!file){throw new HttpException_1.HttpException(400,index_1.SYSTEM_ERRORS.FILE_NOT_SENT);}const avatarFile=yield FilesSchema_1.FilesModel.findById(avatarId);if(!avatarFile){throw new HttpException_1.HttpException(400,index_1.SYSTEM_ERRORS.FILE_NOT_FOUND);}yield Promise.all([(0,multer_1.cloudinaryDestroy)(avatarFile.filename),avatarFile.updateOne({original_name:file.originalname,filename:file.filename,url:file.path,mimetype:file.mimetype})]);const updatedFile=yield FilesSchema_1.FilesModel.findById(avatarId);return res.status(200).json(updatedFile);}catch(error){return(0,errorHandler_1.errorHandler)(error,res);}});}update_barber_thumb(req,res){return __awaiter(this,void 0,void 0,function*(){try{const barber=res.locals.barber;const file=req.file;const thumbId=req.params.thumbId;res.locals.file=file;if(!file){throw new HttpException_1.HttpException(400,index_1.SYSTEM_ERRORS.FILE_NOT_SENT);}if(!thumbId){throw new HttpException_1.HttpException(400,index_1.SYSTEM_ERRORS.FILE_NOT_FOUND);}const newThumb=yield FilesSchema_1.FilesModel.create({original_name:file.originalname,filename:file.filename,url:file.path,mimetype:file.mimetype});if(!newThumb){throw new HttpException_1.HttpException(400,index_1.SYSTEM_ERRORS.FILE_NOT_CREATED);}yield barber.updateOne({$push:{thumbs:newThumb._id}});const oldThumb=yield FilesSchema_1.FilesModel.findByIdAndDelete(thumbId);if(!oldThumb){throw new HttpException_1.HttpException(400,index_1.SYSTEM_ERRORS.FILE_NOT_FOUND);}yield(0,multer_1.cloudinaryDestroy)(oldThumb.filename);yield barber.updateOne({$pull:{thumbs:thumbId}});return res.status(201).json(null);}catch(error){const file=res.locals.file;if(file){yield(0,multer_1.cloudinaryDestroy)(file.filename);}return(0,errorHandler_1.errorHandler)(error,res);}});}upload_barber_thumbs(req,res){return __awaiter(this,void 0,void 0,function*(){try{const files=req.files;const barber=res.locals.barber;if(!files){throw new HttpException_1.HttpException(400,index_1.SYSTEM_ERRORS.FILE_NOT_SENT);}yield Promise.all(files.map(file=>__awaiter(this,void 0,void 0,function*(){const new_thumb=yield FilesSchema_1.FilesModel.create({original_name:file.originalname,filename:file.filename,url:file.path,mimetype:file.mimetype});if(!new_thumb){throw new HttpException_1.HttpException(400,index_1.SYSTEM_ERRORS.FILE_NOT_CREATED);}yield barber.updateOne({$push:{thumbs:new_thumb._id}});})));return res.status(201).json(null);}catch(error){return(0,errorHandler_1.errorHandler)(error,res);}});}delete_barber_thumb(req,res){return __awaiter(this,void 0,void 0,function*(){try{const thumb_id=req.params.thumbId;const barber=res.locals.barber;if(!thumb_id){throw new HttpException_1.HttpException(400,index_1.SYSTEM_ERRORS.FILE_NOT_FOUND);}const thumb=yield FilesSchema_1.FilesModel.findById(thumb_id);if(!thumb){throw new HttpException_1.HttpException(400,index_1.SYSTEM_ERRORS.FILE_NOT_FOUND);}yield(0,multer_1.cloudinaryDestroy)(thumb.filename);yield thumb.deleteOne();yield barber.updateOne({$pull:{thumbs:thumb_id}});return res.status(200).json(null);}catch(error){return(0,errorHandler_1.errorHandler)(error,res);}});}}exports.default=new FilesRepository();