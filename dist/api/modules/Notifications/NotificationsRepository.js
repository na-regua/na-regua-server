'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};Object.defineProperty(exports,'__esModule',{value:true});const index_1=require('../../../core/index');const app_1=require('../../../app');const Queue_1=require('../Queue');const Users_1=require('../Users');const Workers_1=require('../Workers');const NotificationsSchema_1=require('./NotificationsSchema');class CustomerServicesRepository{index(req,res){return __awaiter(this,void 0,void 0,function*(){try{const user=res.locals.user;const {read,limit}=req.query;const userId=user._id.toString();const params={to:userId};if(read){params.read=read==='true';}const total=yield NotificationsSchema_1.NotificationsModel.countDocuments(params);const hasUnread=!!(yield NotificationsSchema_1.NotificationsModel.exists({to:user._id.toString(),read:false}));const notifications=yield NotificationsSchema_1.NotificationsModel.find(params).sort({createdAt:-1}).limit(limit?+limit:0);if(!notifications){return res.status(200).json([]);}yield(0,NotificationsSchema_1.populateNotifications)(notifications);return res.status(200).json({notifications,total,hasUnread});}catch(error){return(0,index_1.errorHandler)(error,res);}});}mark_as_viewed(req,res){return __awaiter(this,void 0,void 0,function*(){try{const user=res.locals.user;const {notificationId}=req.params;const notification=yield NotificationsSchema_1.NotificationsModel.findOne({_id:notificationId,to:user._id});if(!notification){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.NOTIFICATION_NOT_FOUND);}yield notification.updateOne({read:true});return res.status(200).json(null);}catch(error){return(0,index_1.errorHandler)(error,res);}});}mark_all_as_viewed(_,res){return __awaiter(this,void 0,void 0,function*(){try{const user=res.locals.user;const notifications=yield NotificationsSchema_1.NotificationsModel.find({to:user._id});if(!notifications){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.NOTIFICATION_NOT_FOUND);}yield NotificationsSchema_1.NotificationsModel.updateMany({to:user._id},{read:true});return res.status(200).json(null);}catch(error){return(0,index_1.errorHandler)(error,res);}});}notify_barber_workers(barberId,message,data,icon){return __awaiter(this,void 0,void 0,function*(){let workers=yield Workers_1.WorkersModel.find({barber:barberId});if(!workers){return;}workers.forEach(worker=>__awaiter(this,void 0,void 0,function*(){const notification=yield NotificationsSchema_1.NotificationsModel.create({to:worker.user._id.toString(),message,data,icon});if(!notification){return;}if(app_1.GlobalSocket.io){app_1.GlobalSocket.io.to(worker.user._id.toString()).emit(index_1.SocketUrls.NewNotification,{notification});}}));});}notify_queue_workers(queueId,message,data,icon){return __awaiter(this,void 0,void 0,function*(){const queue=yield Queue_1.QueueModel.findOne({_id:queueId});if(!queue){return;}queue.workers.forEach(workerId=>__awaiter(this,void 0,void 0,function*(){const worker=yield Workers_1.WorkersModel.findOne({_id:workerId});if(!worker){return;}const notification=yield NotificationsSchema_1.NotificationsModel.create({to:worker.user._id.toString(),message,data,icon});if(!notification){return;}if(app_1.GlobalSocket.io){app_1.GlobalSocket.io.to(worker.user._id.toString()).emit(index_1.SocketUrls.NewNotification,{notification});}}));});}notify_user(user_id,message,data,icon){return __awaiter(this,void 0,void 0,function*(){const user=yield Users_1.UsersModel.findById(user_id);if(!user){return;}const notification=yield NotificationsSchema_1.NotificationsModel.create({to:user._id.toString(),message,data,icon});if(!notification){return;}yield(0,NotificationsSchema_1.populateNotifications)([notification]);if(app_1.GlobalSocket.io){app_1.GlobalSocket.io.to(user._id.toString()).emit(index_1.SocketUrls.NewNotification,{notification});}});}}exports.default=new CustomerServicesRepository();