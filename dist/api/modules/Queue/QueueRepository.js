'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};Object.defineProperty(exports,'__esModule',{value:true});const index_1=require('../../../core/index');const QueueSchema_1=require('./QueueSchema');const index_2=require('../../../utils/index');class QueueRepository{index(req,res){return __awaiter(this,void 0,void 0,function*(){try{const queues=yield QueueSchema_1.QueueModel.find();return res.status(200).json(queues);}catch(error){return(0,index_1.errorHandler)(error,res);}});}create(req,res){return __awaiter(this,void 0,void 0,function*(){try{const worker=res.locals.worker;const barber=res.locals.barber;const {today,nextDay}=(0,index_2.getTodayAndNextTo)(1);const hasCreatedQueueToday=yield QueueSchema_1.QueueModel.findOne({createdAt:{$gte:today,$lt:nextDay}});if(hasCreatedQueueToday){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.QUEUE_CAN_CREATE_ONLY_ONE_PER_DAY);}const newQueue=yield QueueSchema_1.QueueModel.create({barber:barber._id,workers:[worker._id]});return res.status(201).json({queue:newQueue});}catch(error){return(0,index_1.errorHandler)(error,res);}});}getTodayQueue(req,res){return __awaiter(this,void 0,void 0,function*(){try{const barber=res.locals.barber;const today=new Date();today.setHours(0,0,0,0);const nextDay=new Date(today);nextDay.setDate(today.getDate()+1);const queue=yield QueueSchema_1.QueueModel.findOne({barber:barber._id,status:{$in:['on','paused']},createdAt:{$gte:today,$lt:nextDay}});yield queue===null||queue===void 0?void 0:queue.populateAll();return res.status(200).json({queue});}catch(error){return(0,index_1.errorHandler)(error,res);}});}}exports.default=new QueueRepository();