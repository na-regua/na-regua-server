'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};Object.defineProperty(exports,'__esModule',{value:true});const index_1=require('../../../core/index');const index_2=require('../../../utils/index');const app_1=require('app');const Barbers_1=require('../Barbers');const Services_1=require('../Services');const Tickets_1=require('../Tickets');const QueueSchema_1=require('./QueueSchema');class QueueRepository{index(req,res){return __awaiter(this,void 0,void 0,function*(){try{const queues=yield QueueSchema_1.QueueModel.find();return res.status(200).json(queues);}catch(error){return(0,index_1.errorHandler)(error,res);}});}create(req,res){return __awaiter(this,void 0,void 0,function*(){try{const worker=res.locals.worker;const barber=res.locals.barber;const {today,nextDay}=(0,index_2.getTodayAndNextTo)(1);const hasCreatedQueueToday=yield QueueSchema_1.QueueModel.findOne({createdAt:{$gte:today,$lt:nextDay}});if(hasCreatedQueueToday){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.QUEUE_CAN_CREATE_ONLY_ONE_PER_DAY);}const newQueue=yield QueueSchema_1.QueueModel.create({barber:barber._id,workers:[worker._id]});yield Barbers_1.BarbersModel.updateLiveInfo(barber._id.toString(),{queue:newQueue});return res.status(201).json({queue:newQueue});}catch(error){return(0,index_1.errorHandler)(error,res);}});}getTodayQueue(req,res){return __awaiter(this,void 0,void 0,function*(){try{const barber=res.locals.barber;const today=new Date();today.setHours(0,0,0,0);const nextDay=new Date(today);nextDay.setDate(today.getDate()+1);const queue=yield QueueSchema_1.QueueModel.findOne({barber:barber._id,status:{$in:['on','paused']},createdAt:{$gte:today,$lt:nextDay}});yield queue===null||queue===void 0?void 0:queue.populateAll();return res.status(200).json({queue});}catch(error){return(0,index_1.errorHandler)(error,res);}});}getBarberTodayQueue(req,res){return __awaiter(this,void 0,void 0,function*(){try{const {barberId}=req.params;const barber=yield Barbers_1.BarbersModel.findById(barberId);if(!barber){return new index_1.HttpException(400,index_1.SYSTEM_ERRORS.BARBER_NOT_FOUND);}const {nextDay,today}=(0,index_2.getTodayAndNextTo)(1);const queue=yield QueueSchema_1.QueueModel.findOne({barber:barber._id,status:{$in:['on','paused']},createdAt:{$gte:today,$lt:nextDay}});yield queue===null||queue===void 0?void 0:queue.populateAll();return res.status(200).json({queue});}catch(error){return(0,index_1.errorHandler)(error,res);}});}userJoinQueue(req,res){return __awaiter(this,void 0,void 0,function*(){try{const user=res.locals.user;const {code,serviceId}=req.body;const service=yield Services_1.ServicesModel.findById(serviceId);if(!service){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.SERVICE_NOT_FOUND);}const barber=yield Barbers_1.BarbersModel.findOne({code});if(!barber){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.BARBER_NOT_FOUND);}if(!barber.open){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.BARBER_IS_CLOSED);}const queue=yield QueueSchema_1.QueueModel.findBarberTodayQueue(barber._id.toString());if(!queue){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.QUEUE_NOT_FOUND);}yield queue.populate('tickets');const isUserInQueue=queue.tickets.some(ticket=>ticket.customer._id.toString()===user._id.toString());if(isUserInQueue){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.USER_ALREADY_IN_QUEUE);}const isCustomer=barber.customers.find(customer=>customer._id.toString()===user._id.toString());const customerPosition=isCustomer?(yield QueueSchema_1.QueueModel.findLastPosition(queue._id))+1:0;const ticket=yield Tickets_1.TicketsModel.create({queue:{queue_dto:queue._id,position:customerPosition,date:queue.createdAt},type:'queue',customer:user._id,service:service._id,barber:barber._id,approved:!!isCustomer,status:isCustomer?'queue':'pending'});yield queue.updateOne({$push:{tickets:ticket._id}});yield queue.save();const updatedQueue=yield QueueSchema_1.QueueModel.findById(queue._id);yield updatedQueue===null||updatedQueue===void 0?void 0:updatedQueue.populateAll();app_1.GlobalSocket.io.to(queue._id.toString()).emit(index_1.SocketUrls.GetQueue,{queue:updatedQueue});app_1.GlobalSocket.emitGlobalEvent(barber._id.toString(),'USER_JOINED',{customer:user});yield ticket.populateAll();yield Barbers_1.BarbersModel.updateLiveInfo(barber._id.toString(),{queue:updatedQueue});return res.status(200).json({ticket});}catch(error){return(0,index_1.errorHandler)(error,res);}});}workerJoinQueue(req,res){return __awaiter(this,void 0,void 0,function*(){try{const worker=res.locals.worker;const queue=yield QueueSchema_1.QueueModel.findBarberTodayQueue(worker.barber._id.toString());if(!queue){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.QUEUE_NOT_FOUND);}if(!queue.workers.some(w=>w._id.toString()===worker._id.toString())){yield queue.updateOne({$push:{workers:worker._id}});}yield queue.populateAll();yield worker.populate('user');app_1.GlobalSocket.emitGlobalEvent(queue._id.toString(),'WORKER_JOINED_QUEUE',{worker});const updatedQueue=yield QueueSchema_1.QueueModel.findById(queue._id);app_1.GlobalSocket.io.to(queue._id.toString()).emit(index_1.SocketUrls.GetQueue,{queue:updatedQueue});return res.json({queue:updatedQueue});}catch(error){return(0,index_1.errorHandler)(error,res);}});}}exports.default=new QueueRepository();