'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{'default':mod};};Object.defineProperty(exports,'__esModule',{value:true});const index_1=require('../../../core/index');const index_2=require('../../../utils/index');const app_1=require('../../../app');const Barbers_1=require('../Barbers');const NotificationsRepository_1=__importDefault(require('../Notifications/NotificationsRepository'));const Services_1=require('../Services');const Tickets_1=require('../Tickets');const QueueSchema_1=require('./QueueSchema');class QueueRepository{index(req,res){return __awaiter(this,void 0,void 0,function*(){try{const queues=yield QueueSchema_1.QueueModel.find();return res.status(200).json(queues);}catch(error){return(0,index_1.errorHandler)(error,res);}});}create(req,res){return __awaiter(this,void 0,void 0,function*(){try{const worker=res.locals.worker;const barber=res.locals.barber;const {today,next_day}=(0,index_2.getTodayAndNextTo)(1);const has_created_queue_today=yield QueueSchema_1.QueueModel.findOne({barber:barber._id.toString(),createdAt:{$gte:today,$lt:next_day}});if(has_created_queue_today){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.QUEUE_CAN_CREATE_ONLY_ONE_PER_DAY);}if(!barber.open){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.BARBER_IS_CLOSED);}const new_queue=yield QueueSchema_1.QueueModel.create({barber:barber._id,workers:[worker._id]});yield Barbers_1.BarbersModel.updateLiveInfo(barber._id.toString(),{queue:new_queue},'BARBER_QUEUE_IS_ON');return res.status(201).json({queue:new_queue});}catch(error){return(0,index_1.errorHandler)(error,res);}});}get_today_queue(req,res){return __awaiter(this,void 0,void 0,function*(){try{const barber=res.locals.barber;const {today,next_day}=(0,index_2.getTodayAndNextTo)(1);const queue=yield QueueSchema_1.QueueModel.findOne({barber:barber._id,status:{$in:['on','paused']},createdAt:{$gte:today,$lt:next_day}});yield queue===null||queue===void 0?void 0:queue.populateAll();return res.status(200).json({queue});}catch(error){return(0,index_1.errorHandler)(error,res);}});}get_today_queue_by_barber_id(req,res){return __awaiter(this,void 0,void 0,function*(){try{const {barberId}=req.params;const barber=yield Barbers_1.BarbersModel.findById(barberId);if(!barber){return new index_1.HttpException(400,index_1.SYSTEM_ERRORS.BARBER_NOT_FOUND);}const {next_day,today}=(0,index_2.getTodayAndNextTo)(1);const queue=yield QueueSchema_1.QueueModel.findOne({barber:barber._id,status:{$in:['on','paused']},createdAt:{$gte:today,$lt:next_day}});yield queue===null||queue===void 0?void 0:queue.populateAll();return res.status(200).json({queue});}catch(error){return(0,index_1.errorHandler)(error,res);}});}user_join_queue(req,res){return __awaiter(this,void 0,void 0,function*(){try{const user=res.locals.user;const {code,serviceId:service_id,additionalServicesId:additional_services_id}=req.body;const service=yield Services_1.ServicesModel.findById(service_id);if(!service){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.SERVICE_NOT_FOUND);}const additional_services=yield Services_1.ServicesModel.find({_id:{$in:additional_services_id}});const barber=yield Barbers_1.BarbersModel.findOne({code});if(!barber){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.BARBER_NOT_FOUND);}if(!barber.open){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.BARBER_IS_CLOSED);}const {today,next_day}=(0,index_2.getTodayAndNextTo)(1);const queue=yield QueueSchema_1.QueueModel.findBarberTodayQueue(barber._id.toString());if(!queue){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.QUEUE_NOT_FOUND);}yield queue.populate('tickets');const user_already_on_queue=queue.tickets.find(ticket=>ticket.customer._id.toString()===user._id.toString());if(user_already_on_queue&&(user_already_on_queue.status==='queue'||user_already_on_queue.status==='scheduled')){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.USER_ALREADY_IN_QUEUE);}const isOnQueue=yield Tickets_1.TicketsModel.findOne({customer:user._id,type:'queue',status:{$in:['pending','queue']},'queue.date':{$gte:today,$lt:next_day}});if(isOnQueue){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.USER_ALREADY_IN_OTHER_QUEUE);}const is_customer=barber.customers.find(customer=>customer._id.toString()===user._id.toString());const customer_position=is_customer?(yield QueueSchema_1.QueueModel.findLastPosition(queue._id))+1:0;const ticket=yield Tickets_1.TicketsModel.create({queue:{queue_dto:queue._id,position:customer_position,date:queue.createdAt},type:'queue',customer:user._id,service:service._id,barber:barber._id,approved:!!is_customer,status:is_customer?'queue':'pending',additional_services:additional_services.map(s=>s._id)});yield queue.updateOne({$push:{tickets:ticket._id}});yield queue.save();const updated_queue=yield QueueSchema_1.QueueModel.findById(queue._id);if(updated_queue){yield updated_queue.populateAll();app_1.GlobalSocket.io.to(queue._id.toString()).emit(index_1.SocketUrls.GetQueue,{queue:updated_queue});yield Barbers_1.BarbersModel.updateLiveInfo(barber._id.toString(),{queue:updated_queue});}app_1.GlobalSocket.emitGlobalEvent(barber._id.toString(),'USER_JOINED',{customer:user});yield ticket.populateAll();return res.status(200).json({ticket});}catch(error){return(0,index_1.errorHandler)(error,res);}});}user_leave_queue(req,res){return __awaiter(this,void 0,void 0,function*(){try{const {ticketId:ticket_id}=req.params;let ticket=yield Tickets_1.TicketsModel.findById(ticket_id);if(!ticket){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.QUEUE_NOT_FOUND);}const is_queue_ticket=ticket.type==='queue';if(is_queue_ticket&&ticket&&ticket.queue){let queue=yield QueueSchema_1.QueueModel.findById(ticket.queue.queue_dto.toString());if(!queue){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.QUEUE_NOT_FOUND);}const ticket_new_status='missed';ticket=yield Tickets_1.TicketsModel.findByIdAndUpdate(ticket._id.toString(),{status:ticket_new_status,missedAt:new Date()},{new:true});queue=yield QueueSchema_1.QueueModel.findByIdAndUpdate(queue._id.toString(),{$pull:{tickets:ticket===null||ticket===void 0?void 0:ticket._id.toString()},$push:{misseds:ticket===null||ticket===void 0?void 0:ticket._id.toString()}},{new:true});if(!queue){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.QUEUE_NOT_FOUND);}yield ticket===null||ticket===void 0?void 0:ticket.populateAll();yield queue.populateAll();app_1.GlobalSocket.io.to(queue._id.toString()).emit(index_1.SocketUrls.GetQueue,{queue});queue.workers.forEach(w=>{app_1.GlobalSocket.emitGlobalEvent(w.user._id.toString(),'USER_LEAVE',{customer:ticket===null||ticket===void 0?void 0:ticket.customer});});}return res.status(204).json(null);}catch(error){return(0,index_1.errorHandler)(error,res);}});}worker_join_queue(req,res){return __awaiter(this,void 0,void 0,function*(){try{const worker=res.locals.worker;let queue=yield QueueSchema_1.QueueModel.findBarberTodayQueue(worker.barber._id.toString());if(!queue){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.QUEUE_NOT_FOUND);}if(!queue.workers.some(w=>w._id.toString()===worker._id.toString())){queue=yield QueueSchema_1.QueueModel.findByIdAndUpdate(queue._id.toString(),{$push:{workers:worker._id}},{new:true});app_1.GlobalSocket.emitGlobalEvent(queue===null||queue===void 0?void 0:queue._id.toString(),'WORKER_JOINED_QUEUE',{worker});}yield queue===null||queue===void 0?void 0:queue.populateAll();yield worker.populate('user');app_1.GlobalSocket.io.to(queue===null||queue===void 0?void 0:queue._id.toString()).emit(index_1.SocketUrls.GetQueue,{queue});return res.json({queue});}catch(error){return(0,index_1.errorHandler)(error,res);}});}worker_approve_ticket(req,res){return __awaiter(this,void 0,void 0,function*(){try{const worker=res.locals.worker;const barber=res.locals.barber;let queue=yield QueueSchema_1.QueueModel.findBarberTodayQueue(worker.barber._id.toString());if(!queue){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.QUEUE_NOT_FOUND);}if(!queue.workers.some(qw=>qw._id.toString()===worker._id.toString())){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.WORKER_NOT_IN_QUEUE);}const {ticketId:ticket_id}=req.params;const ticket=yield Tickets_1.TicketsModel.findById(ticket_id).populate('customer');if(!ticket){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.TICKET_NOT_FOUND);}if(!queue.tickets.some(t=>t._id.toString()===ticket._id.toString())){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.TICKET_NOT_FOUND);}const newStatus=ticket.type==='queue'?'queue':'scheduled';const newPosition=(yield QueueSchema_1.QueueModel.findLastPosition(queue._id.toString()))+1;const updated_ticket=yield Tickets_1.TicketsModel.findByIdAndUpdate(ticket._id.toString(),{approved:true,status:newStatus,'queue.position':newPosition},{new:true});if(!updated_ticket){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.TICKET_NOT_FOUND);}yield worker.populate('barber');yield worker.populate('user');yield updated_ticket.populateAll();app_1.GlobalSocket.io.to(updated_ticket._id.toString()).emit(index_1.SocketUrls.GetTicket,{ticket:updated_ticket});app_1.GlobalSocket.emitGlobalEvent(updated_ticket._id.toString(),'WORKER_APPROVED_TICKET',{customer:updated_ticket.customer,worker});yield queue.populate('workers');const other_queue_workers=queue.workers.filter(w=>w._id.toString()!==worker._id.toString());if(other_queue_workers.length>0){other_queue_workers.forEach(w=>{app_1.GlobalSocket.emitGlobalEvent(w._id.toString(),'USER_APPROVED',{customer:updated_ticket.customer,worker});});}yield queue.populateAll();app_1.GlobalSocket.io.to(queue._id.toString()).emit(index_1.SocketUrls.GetQueue,{queue});yield barber.updateOne({$push:{customers:ticket.customer._id.toString()}});yield Barbers_1.BarbersModel.updateLiveInfo(barber._id.toString(),{queue});const messageType='WORKER_ADD_USER_AS_CUSTOMER';yield NotificationsRepository_1.default.notify_user(updated_ticket.customer._id.toString(),messageType,{worker},worker.user.avatar._id.toString());return res.status(204).json(null);}catch(error){return(0,index_1.errorHandler)(error,res);}});}worker_reject_ticket(req,res){return __awaiter(this,void 0,void 0,function*(){try{const worker=res.locals.worker;const barber=res.locals.barber;let queue=yield QueueSchema_1.QueueModel.findBarberTodayQueue(worker.barber._id.toString());if(!queue){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.QUEUE_NOT_FOUND);}if(!queue.workers.some(qw=>qw._id.toString()===worker._id.toString())){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.WORKER_NOT_IN_QUEUE);}const {ticketId}=req.params;let ticket=yield Tickets_1.TicketsModel.findById(ticketId);if(!ticket){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.TICKET_NOT_FOUND);}if(!queue.tickets.some(t=>t._id.toString()===(ticket===null||ticket===void 0?void 0:ticket._id.toString()))){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.TICKET_NOT_FOUND);}const newStatus='missed';ticket=yield Tickets_1.TicketsModel.findByIdAndUpdate(ticket._id.toString(),{approved:false,status:newStatus,missedAt:new Date()},{new:true});if(!ticket){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.TICKET_NOT_FOUND);}queue=yield QueueSchema_1.QueueModel.findByIdAndUpdate(queue._id.toString(),{$pull:{tickets:ticket._id.toString()}},{new:true});if(!queue){throw new index_1.HttpException(400,index_1.SYSTEM_ERRORS.QUEUE_NOT_FOUND);}yield worker.populate('barber');yield worker.populate('user');yield ticket.populateAll();app_1.GlobalSocket.io.to(ticket._id.toString()).emit(index_1.SocketUrls.GetTicket,{ticket});app_1.GlobalSocket.emitGlobalEvent(ticket._id.toString(),'WORKER_REJECTED_TICKET',{customer:ticket.customer,worker});yield queue.populate('workers');const other_queue_workers=queue.workers.filter(w=>w._id.toString()!==worker._id.toString());if(other_queue_workers.length>0){other_queue_workers.forEach(w=>{app_1.GlobalSocket.emitGlobalEvent(w._id.toString(),'USER_REJECTED',{customer:ticket===null||ticket===void 0?void 0:ticket.customer,worker:w});});}yield queue.populateAll();app_1.GlobalSocket.io.to(queue._id.toString()).emit(index_1.SocketUrls.GetQueue,{queue});yield Barbers_1.BarbersModel.updateLiveInfo(barber._id.toString(),{queue});return res.status(204).json(null);}catch(error){return(0,index_1.errorHandler)(error,res);}});}}exports.default=new QueueRepository();