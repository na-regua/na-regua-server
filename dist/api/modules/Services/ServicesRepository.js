'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};Object.defineProperty(exports,'__esModule',{value:true});const HttpException_1=require('../../../core/HttpException/HttpException');const SystemErrors_1=require('../../../core/SystemErrors/SystemErrors');const errorHandler_1=require('../../../core/errorHandler/errorHandler');const ServicesSchema_1=require('./ServicesSchema');class ServicesRepository{index(req,res){return __awaiter(this,void 0,void 0,function*(){try{const query=req.query;const filter={};if(query.barberId){filter.barber=query.barberId;}const services=yield ServicesSchema_1.ServicesModel.find(filter);return res.status(200).json(services);}catch(error){return(0,errorHandler_1.errorHandler)(error,res);}});}create(req,res){return __awaiter(this,void 0,void 0,function*(){try{const body=req.body;const barber=res.locals.barber;body.barber=barber._id;const newService=yield ServicesSchema_1.ServicesModel.create(body);if(!newService){throw new HttpException_1.HttpException(400,SystemErrors_1.SYSTEM_ERRORS.SERVICE_NOT_CREATED);}return res.status(201).json(newService);}catch(error){return(0,errorHandler_1.errorHandler)(error,res);}});}update(req,res){return __awaiter(this,void 0,void 0,function*(){try{const {serviceId}=req.params;const body=req.body;const barber=res.locals.barber;if(!serviceId){throw new HttpException_1.HttpException(400,SystemErrors_1.SYSTEM_ERRORS.SERVICE_NOT_FOUND);}const service=yield ServicesSchema_1.ServicesModel.findByIdAndUpdate({_id:serviceId,barber:barber._id},body);if(!service){throw new HttpException_1.HttpException(400,SystemErrors_1.SYSTEM_ERRORS.SERVICE_NOT_FOUND);}const updatedService=yield ServicesSchema_1.ServicesModel.findById(serviceId);return res.status(201).json(updatedService);}catch(error){return(0,errorHandler_1.errorHandler)(error,res);}});}delete(req,res){return __awaiter(this,void 0,void 0,function*(){try{const {serviceId}=req.params;const barber=res.locals.barber;const allServices=yield ServicesSchema_1.ServicesModel.find({barber:barber._id});if(!serviceId){throw new HttpException_1.HttpException(400,SystemErrors_1.SYSTEM_ERRORS.SERVICE_NOT_FOUND);}if(!allServices){throw new HttpException_1.HttpException(400,SystemErrors_1.SYSTEM_ERRORS.NO_SERVICES_TO_DELETE);}if(allServices.length===1){throw new HttpException_1.HttpException(400,SystemErrors_1.SYSTEM_ERRORS.BARBER_SHOULD_HAVE_ONE_SERVICE);}const service=yield ServicesSchema_1.ServicesModel.findById(serviceId);if(!service){throw new HttpException_1.HttpException(400,SystemErrors_1.SYSTEM_ERRORS.SERVICE_NOT_FOUND);}yield service.deleteOne();return res.status(200).json(null);}catch(error){return(0,errorHandler_1.errorHandler)(error,res);}});}}exports.default=new ServicesRepository();