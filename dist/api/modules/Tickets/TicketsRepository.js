'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};Object.defineProperty(exports,'__esModule',{value:true});const index_1=require('../../../core/index');const date_1=require('../../../utils/date');const Barbers_1=require('../Barbers');const TicketsSchema_1=require('./TicketsSchema');class TicketsRepository{index(req,res){return __awaiter(this,void 0,void 0,function*(){try{const params=req.query;const tickets=yield TicketsSchema_1.TicketsModel.find().sort({createdAt:-1});yield Promise.all(tickets.map(ticket=>__awaiter(this,void 0,void 0,function*(){yield ticket.populateAll();})));return res.status(200).json();}catch(error){return(0,index_1.errorHandler)(error,res);}});}create(req,res){return __awaiter(this,void 0,void 0,function*(){try{const user=res.locals.user;const {queueId}=req.body;}catch(error){return(0,index_1.errorHandler)(error,res);}});}byUserToday(req,res){return __awaiter(this,void 0,void 0,function*(){try{const user=res.locals.user;const {today,nextDay}=(0,date_1.getTodayAndNextTo)(1);const queueTicket=yield TicketsSchema_1.TicketsModel.findOne({customer:user._id,type:'queue',status:{$in:['pending','queue']},'queue.date':{$gte:today,$lt:nextDay}});const todayScheduleTicket=yield TicketsSchema_1.TicketsModel.find({customer:user._id,type:'schedule',status:{$in:['pending','queue']},'schedule.date':{$gte:today,$lt:nextDay}});yield queueTicket===null||queueTicket===void 0?void 0:queueTicket.populateAll();return res.status(200).json({queue:queueTicket,todaySchedule:todayScheduleTicket});}catch(error){return(0,index_1.errorHandler)(error,res);}});}delete(req,res){return __awaiter(this,void 0,void 0,function*(){});}rate(req,res){return __awaiter(this,void 0,void 0,function*(){try{const user=res.locals.user;const {ticketId}=req.params;const {rating,comment}=req.body;const ticket=yield TicketsSchema_1.TicketsModel.findById(ticketId);if(!ticket){throw new index_1.HttpException(404,index_1.SYSTEM_ERRORS.TICKET_NOT_FOUND);}if(ticket.customer.toString()!==user._id.toString()){throw new index_1.HttpException(403,index_1.SYSTEM_ERRORS.FORBIDDEN);}const barber=yield Barbers_1.BarbersModel.findById(ticket.barber._id.toString());if(!barber){throw new index_1.HttpException(404,index_1.SYSTEM_ERRORS.BARBER_NOT_FOUND);}yield ticket.updateOne({rate:{rating,comment}});yield barber.updateRating();return res.status(200).json();}catch(error){return(0,index_1.errorHandler)(error,res);}});}}exports.default=new TicketsRepository();