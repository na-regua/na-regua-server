'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};Object.defineProperty(exports,'__esModule',{value:true});exports.QueueSocketEvents=void 0;const modules_1=require('../../../api/modules');const app_1=require('../../../app');const SocketModel_1=require('../SocketModel');class QueueSocketEvents{constructor(socket,user){this.filters={showAllTickets:false};this.globalIo=app_1.GlobalSocket;this.socket=socket;this.user=user;}init(){this.socket.on(SocketModel_1.SocketUrls.UserJoinTicketChannels,data=>this.user_join_ticket_channels(data));this.socket.on(SocketModel_1.SocketUrls.UserLeaveTicketChannels,data=>this.user_leave_queue_channels(data));this.socket.on(SocketModel_1.SocketUrls.WorkerJoinQueueChannels,()=>this.worker_join_queue_channels());this.socket.on(SocketModel_1.SocketUrls.WorkerPauseQueue,()=>this.workerPauseQueue());this.socket.on(SocketModel_1.SocketUrls.WorkerResumeQueue,()=>this.workerResumeQueue());}getQueueDataByUserWorker(){var _a;return __awaiter(this,void 0,void 0,function*(){const workerId=(_a=this.user.worker)===null||_a===void 0?void 0:_a._id.toString();const worker=yield modules_1.WorkersModel.findById(workerId);if(!worker){this.globalIo.emitEvent(this.socket,'WORKER_NOT_FOUND');return null;}const queue=yield modules_1.QueueModel.findBarberTodayQueue(worker.barber._id.toString());if(!queue){this.globalIo.emitEvent(this.socket,'QUEUE_NOT_FOUND');return null;}return{queue,worker};});}user_join_ticket_channels(data){return __awaiter(this,void 0,void 0,function*(){const {ticketId:ticket_id}=data;const ticket=yield modules_1.TicketsModel.findById(ticket_id);if(ticket&&ticket.type==='queue'&&ticket.queue){const queue=yield modules_1.QueueModel.findById(ticket.queue.queue_dto);if(queue){this.socket.join(ticket._id.toString());}}});}user_leave_queue_channels(data){return __awaiter(this,void 0,void 0,function*(){const {ticketId:ticket_id}=data;const ticket=yield modules_1.TicketsModel.findById(ticket_id);if(ticket&&ticket.type==='queue'&&ticket.queue){const queue=yield modules_1.QueueModel.findById(ticket.queue.queue_dto);if(queue){this.socket.leave(ticket._id.toString());}}});}worker_join_queue_channels(){return __awaiter(this,void 0,void 0,function*(){const getQueue=yield this.getQueueDataByUserWorker();if(!getQueue){return;}const {queue,worker}=getQueue;yield this.socket.join(queue._id.toString());yield this.socket.join(worker._id.toString());yield this.socket.join(worker.barber._id.toString());});}workerLeaveQueue(){}workerServeCustomer(){return __awaiter(this,void 0,void 0,function*(){const getQueue=yield this.getQueueDataByUserWorker();if(!getQueue){return;}const {queue,worker}=getQueue;});}workerMissCustomer(){return __awaiter(this,void 0,void 0,function*(){const getQueue=yield this.getQueueDataByUserWorker();if(!getQueue){return;}const {queue,worker}=getQueue;});}workerFinishQueue(){}workerPauseQueue(){return __awaiter(this,void 0,void 0,function*(){const getQueue=yield this.getQueueDataByUserWorker();if(!getQueue){return;}const {queue,worker}=getQueue;yield queue.updateOne({status:'paused'});this.globalIo.emitGlobalEvent(queue._id.toString(),'QUEUE_PAUSED',{worker});const updatedQueue=yield modules_1.QueueModel.findById(queue._id.toString());if(updatedQueue){this.globalIo.io.to(queue._id.toString()).emit(SocketModel_1.SocketUrls.GetQueue,{queue:updatedQueue});}});}workerResumeQueue(){return __awaiter(this,void 0,void 0,function*(){const getQueue=yield this.getQueueDataByUserWorker();if(!getQueue){return;}const {queue,worker}=getQueue;yield queue.updateOne({status:'on'});this.globalIo.emitGlobalEvent(queue._id.toString(),'QUEUE_RESUMED',{worker});const updatedQueue=yield modules_1.QueueModel.findById(queue._id.toString());if(updatedQueue){this.globalIo.io.to(queue._id.toString()).emit(SocketModel_1.SocketUrls.GetQueue,{queue:updatedQueue});}});}}exports.QueueSocketEvents=QueueSocketEvents;