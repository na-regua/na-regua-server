'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{'default':mod};};Object.defineProperty(exports,'__esModule',{value:true});exports.SocketQueueEvents=void 0;const modules_1=require('../../../api/modules');const NotificationsRepository_1=__importDefault(require('../../../api/modules/Notifications/NotificationsRepository'));const app_1=require('../../../app');const SocketModel_1=require('../SocketModel');class SocketQueueEvents{constructor(socket,user){this.filters={showAllTickets:false};this.globalIo=app_1.GlobalSocket;this.socket=socket;this.user=user;}getQueueDataByUserWorker(){var _a;return __awaiter(this,void 0,void 0,function*(){const workerId=(_a=this.user.worker)===null||_a===void 0?void 0:_a._id.toString();const worker=yield modules_1.WorkersModel.findById(workerId);if(!worker){this.globalIo.emitEvent(this.socket,'WORKER_NOT_FOUND');return null;}const queue=yield modules_1.QueueModel.findBarberTodayQueue(worker.barber._id.toString());if(!queue){this.globalIo.emitEvent(this.socket,'QUEUE_NOT_FOUND');return null;}return{queue,worker};});}init(){this.socket.on(SocketModel_1.SocketUrls.WorkerJoinQueue,()=>this.workerJoinQueue());this.socket.on(SocketModel_1.SocketUrls.UserJoinQueue,data=>this.userJoinQueue(data));this.socket.on(SocketModel_1.SocketUrls.WorkerPauseQueue,()=>this.workerPauseQueue());this.socket.on(SocketModel_1.SocketUrls.WorkerResumeQueue,()=>this.workerResumeQueue());}workerJoinQueue(){return __awaiter(this,void 0,void 0,function*(){const getQueue=yield this.getQueueDataByUserWorker();if(!getQueue){return;}const {queue,worker}=getQueue;if(!queue.workers.some(worker=>worker._id.toString()===worker._id.toString())){yield queue.updateOne({$push:{workers:worker._id}});}yield worker.populate('user');this.globalIo.emitGlobalEvent(queue._id.toString(),'WORKER_JOINED_QUEUE',{worker});this.socket.join(queue._id.toString());yield this.socket.join(worker.barber._id.toString());const updatedQueue=yield modules_1.QueueModel.findById(queue._id);if(updatedQueue){yield updatedQueue.populateAll();this.globalIo.io.emit(SocketModel_1.SocketUrls.GetQueue,{queue:updatedQueue});}});}userJoinQueue(data){return __awaiter(this,void 0,void 0,function*(){const {code,serviceId}=data;const service=yield modules_1.ServicesModel.findById(serviceId);if(!service){return;}const barber=yield modules_1.BarbersModel.findOne({code});if(!barber){this.globalIo.emitEvent(this.socket,'BARBER_NOT_FOUND');return;}if(!barber.open){this.globalIo.emitEvent(this.socket,'BARBER_IS_CLOSED');return;}const queue=yield modules_1.QueueModel.findBarberTodayQueue(barber._id.toString());if(!queue){this.globalIo.emitEvent(this.socket,'QUEUE_NOT_FOUND');return;}const isCustomer=barber.customers.find(customerId=>customerId.toString()===this.user._id.toString());const ticket=yield modules_1.TicketsModel.create({queue:{queueDTO:queue._id,position:0},type:'queue',customer:this.user._id,service:service._id,barber:barber._id,approved:isCustomer,status:isCustomer?'queue':'pending'});if(!ticket){this.globalIo.emitEvent(this.socket,'TICKET_NOT_CREATED');return;}yield queue.updateOne({$push:{tickets:ticket._id}});yield queue.save();yield this.socket.join(queue._id.toString());yield this.socket.join(ticket._id.toString());this.socket.emit(SocketModel_1.SocketUrls.GetTicket,{ticket});const updatedQueue=yield modules_1.QueueModel.findById(queue._id);yield updatedQueue===null||updatedQueue===void 0?void 0:updatedQueue.populateAll();this.socket.to(queue._id.toString()).emit(SocketModel_1.SocketUrls.GetQueue,{queue:updatedQueue});this.globalIo.emitGlobalEvent(barber._id.toString(),'USER_JOINED');const messageType=isCustomer?'CUSTOMER_JOINED_QUEUE':'USER_ASK_TO_JOIN_QUEUE';yield NotificationsRepository_1.default.notifyQueueWorkers(queue._id.toString(),messageType,{service},this.user.avatar._id.toString());});}workerLeaveQueue(){}userLeaveQueue(){}workerServeCustomer(){return __awaiter(this,void 0,void 0,function*(){const getQueue=yield this.getQueueDataByUserWorker();if(!getQueue){return;}const {queue,worker}=getQueue;});}workerMissCustomer(){return __awaiter(this,void 0,void 0,function*(){const getQueue=yield this.getQueueDataByUserWorker();if(!getQueue){return;}const {queue,worker}=getQueue;});}workerApproveCustomerRequest(){}workerDenyCustomerRequest(){}workerFinishQueue(){}workerPauseQueue(){return __awaiter(this,void 0,void 0,function*(){const getQueue=yield this.getQueueDataByUserWorker();if(!getQueue){return;}const {queue,worker}=getQueue;yield queue.updateOne({status:'paused'});this.globalIo.emitGlobalEvent(queue._id.toString(),'QUEUE_PAUSED',{worker});const updatedQueue=yield modules_1.QueueModel.findById(queue._id);if(updatedQueue){this.globalIo.io.to(queue._id.toString()).emit(SocketModel_1.SocketUrls.GetQueue,{queue:updatedQueue});}});}workerResumeQueue(){return __awaiter(this,void 0,void 0,function*(){const getQueue=yield this.getQueueDataByUserWorker();if(!getQueue){return;}const {queue,worker}=getQueue;yield queue.updateOne({status:'on'});this.globalIo.emitGlobalEvent(queue._id.toString(),'QUEUE_RESUMED',{worker});const updatedQueue=yield modules_1.QueueModel.findById(queue._id);this.globalIo.io.to(queue._id.toString()).emit(SocketModel_1.SocketUrls.GetQueue,{queue:updatedQueue});});}}exports.SocketQueueEvents=SocketQueueEvents;